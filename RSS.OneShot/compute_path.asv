%% Function that solves the consumption path
function [path_out]=compute_path(c_in,rss,paths,parameters)

% Unpack Model Parameters
parameter_unpack;
time_preallocate;

% Unpack Parameters
rho   = parameters.rho  ;
sigma = parameters.gamma;
U_p_ratio = parameters.U_p_ratio;

% Unpack Risky Steady State
psi_rss   = rss.psi_rss; 

%% Step 1: Construct r_n
% [!] Warning, I am assuming that path reaches a proper STEADY STATE
% [!!] doing this one at a time
% [!!!] not sure what to do at non-convergent solution
% if ()
    c_rss         = c_in(1);
    c_0           = c_in(2); 
    c_in          = c_in(2:N_t+1);
    r_n(1,1:N_t-1)= rho+sigma*(c_in(2:N_t)./c_in(1:N_t-1)-1)*dt;
    r_n(1,N_t)    = rho;
% else
%
%% Step 2: Value at Deterministic Path
v_n = solve_HJB_path(r_n,rho,parameters)    ;
v_0 = v_n(:,1)                              ;

%% Step 3: Solving for Values at RSS
v_0_mat=v_0*U_p_ratio(c_0,c_rss)             ;
% v_rss=solve_HJB_rss(rho,v_0_mat,parameters);

%% Step 3: Solving for Risky Steady State
rss_out=solve_rss(psi_rss,v_0_mat,parameters);

%% Step 4: Solving for Path
f_0=rss_out.f_rss;
path_out=solve_path(f_0,v_n,paths,parameters);

%% Step 5: Packaging Output
c_out=[rss_out.c_rss path_out.c_n];
f_out=[rss_out.f_rss path_out.f_n];
iota_out=[rss_out.iota_rss path_out.iota_n];

% Packaging Output
path_out.v_out = [rss_out.v_rss v_n]    ;
path_out.v_n     = v_n                  ;
path_out.c_out   = c_out                ;
path_out.f_out   = f_out                ;
path_out.iota_out= iota_out             ;
path_out.r_n     = r_n                  ;